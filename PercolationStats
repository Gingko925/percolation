import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;

public class PercolationStats {
	
	private double[] x;
	private static int n;
	private static int t;
	
	public PercolationStats(int N, int T)     // perform T independent experiments on an N-by-N grid
	{
		if (N <= 0 || T <= 0) {
			throw new IllegalArgumentException();
		}
		x = new double[T];
		n = N;
		t = T;
		
		for (int k = 0; k < t; k++) {
			Percolation perc = new Percolation(n);
			int num  =  0;
			while(!perc.percolates()) {
				int i = StdRandom.uniform(n)+1;
				int j = StdRandom.uniform(n)+1;
				if ( !perc.isOpen(i, j) ){
					num ++;
					perc.open(i, j);
				}
			}
			x[k] = (double)num/(double)(n*n);
		}
	}
	public double mean()                      // sample mean of percolation threshold
	{
		return StdStats.mean(x);
	}
	public double stddev()                    // sample standard deviation of percolation threshold
	{
		return StdStats.stddev(x);
	}
	public double confidenceLo()              // low  endpoint of 95% confidence interval
	{
		double m = mean();
		double s = stddev();
		return (m-1.96*s/Math.sqrt(t));
	}
	public double confidenceHi()              // high endpoint of 95% confidence interval
	{
		double m = mean();
		double s = stddev();
		return (m+1.96*s/Math.sqrt(t));
	}

	public static void main(String[] args)  // test client (described below)
	{
		int N = Integer.parseInt(args[0]);
		int T = Integer.parseInt(args[0]);
		if (N <= 0 || T <= 0) {
			throw new IllegalArgumentException();
		}
		else {
			PercolationStats percolationStats = new PercolationStats(N, T);
			StdOut.print("mean                    = ");
			StdOut.println(percolationStats.mean());
			StdOut.print("stddev                  = ");
			StdOut.println(percolationStats.stddev());
			StdOut.print("95% confidence interval = ");
			StdOut.print(percolationStats.confidenceLo());
			StdOut.println(percolationStats.confidenceHi());
		}
	}
}
